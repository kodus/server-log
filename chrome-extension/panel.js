import { renderLog } from "./log.js";
/**
 * This custom element allows us to isolate server-side log pages in a shadow-root.
 */
class LogEntry extends HTMLElement {
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: "open" });
    }
    setHTML(html) {
        let doc = new DOMParser().parseFromString(html, "text/html");
        this.style.display = "block";
        [...doc.head.querySelectorAll("style")].forEach(style => this.shadow.appendChild(style));
        [...doc.body.childNodes].forEach(node => this.shadow.appendChild(node));
    }
}
customElements.define("log-entry", LogEntry);
((panel) => {
    console.log("START: panel.js");
    const $content = document.body.querySelector("[data-content]");
    panel.onNavigation = url => {
        console.log("ON NAVIGATION", url);
        // TODO add "Preserve Log" option (similar to the "Network" tab)
        $content.innerHTML = "";
    };
    panel.onRequest = transaction => {
        console.log("ON REQUEST", transaction);
        // NOTE: weird typecasts required here because the request/response properties
        //       aren't defined in `@types/chrome` - we have to pull these definitions
        //       from a separate package `@types/har-format` and manually cast:
        const request = transaction.request;
        const response = transaction.response;
        const title = `[${response.status} ${response.statusText}] ${request.method} ${request.url}`;
        for (let header of response.headers) {
            const name = header.name.toLowerCase();
            if (name === "x-chromelogger-data") {
                appendLog(title, "X-ChromeLogger-Data", new Promise((resolve, reject) => {
                    try {
                        const log = JSON.parse(atob(header.value));
                        console.log("PARSED CHROME-LOGGER HEADER", log);
                        resolve(renderLog(log));
                    }
                    catch (error) {
                        reject(`Error parsing X-ChromeLogger-Data header (${error})`);
                    }
                }));
            }
            if (name === "x-serverlog-location") {
                const url = new URL(header.value, request.url).href;
                appendLog(title, url, new Promise((resolve, reject) => {
                    fetch(url, {
                        headers: new Headers({
                            "Accept": "text/html, application/json"
                        })
                    }).then(log_response => {
                        let type = log_response.headers.get("Content-Type");
                        if ((type && type.match(/^text\/html/) || (!type && url.match(/\.html$/)))) {
                            console.log("FETCH HTML");
                            resolve(log_response.text());
                        }
                        else {
                            console.log("FETCH JSON");
                            resolve(log_response.json().then(json => renderLog(json)));
                        }
                    }).catch(error => {
                        reject(`Unable to load server-log from: ${url} (${error})`);
                    });
                }));
            }
        }
    };
    /**
     * Append a log document to the "Server Log" panel
     */
    function appendLog(title, source, documentPromise) {
        const header = appendHeader("spinner", title, source);
        const el = document.createElement("log-entry");
        $content.appendChild(el);
        documentPromise
            .then(html => {
            el.setHTML(html);
            header.setIcon("check");
        })
            .catch(error => {
            el.setHTML(`<pre style="color:red; padding-left:20px;">${html(error)}</pre>`);
            header.setIcon("error");
        });
    }
    /**
     * Create a header with an icon, title and source of the request
     */
    function appendHeader(icon, title, source) {
        const el = document.createElement("div");
        el.innerHTML = (`
            <div class="header ${icon ? `header--${icon}` : ``}">
                <div class="header__icon">${icon ? `<span class="icon"></span>` : ``}</div>
                <div class="header__title">${html(title)}</div>
                <div class="header__source">${html(source)}</div>
            </div>`);
        $content.appendChild(el);
        function setIcon(icon) {
            el.querySelector(".icon").className = `icon icon-${icon}`;
        }
        ;
        setIcon(icon);
        return {
            setIcon
        };
    }
    /**
     * Escape plain text as HTML
     */
    function html(str) {
        return (str || '')
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }
})(window);
/*

// NOTE: don't need this for now - might need it to communicate with "background.js"

panel_window.do_something = (msg: string) => {
    console.log("DOING SOMETHING");
    document.body.textContent += '\n' + msg; // Stupid example, PoC
}

document.documentElement.onclick = function() {
    // No need to check for the existence of `respond`, because
    // the panel can only be clicked when it's visible...
    panel_window.respond('Another stupid example!');
};
*/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGFuZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBTyxNQUFNLFVBQVUsQ0FBQztBQUsxQzs7R0FFRztBQUNILE1BQU0sUUFBUyxTQUFRLFdBQVc7SUFHOUI7UUFDSSxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxPQUFPLENBQUMsSUFBWTtRQUNoQixJQUFJLEdBQUcsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFN0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRTdCLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUMzQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFN0MsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUM1QixJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztDQUNKO0FBRUQsY0FBYyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFFN0MsQ0FBQyxDQUFDLEtBQWtCLEVBQUUsRUFBRTtJQUVwQixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFL0IsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxh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SSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7NENBRTFDLElBQUksQ0FBQyxDQUFDLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDLEVBQzFDOzZDQUM2QixJQUFJLENBQUMsS0FBSyxDQUFDOzhDQUNWLElBQUksQ0FBQyxNQUFNLENBQUM7bUJBQ3ZDLENBQ1YsQ0FBQztRQUVGLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFekIsU0FBUyxPQUFPLENBQUMsSUFBVTtZQUN2QixFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBRSxDQUFDLFNBQVMsR0FBRyxhQUFhLElBQUksRUFBRSxDQUFDO1FBQy9ELENBQUM7UUFBQSxDQUFDO1FBRUYsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWQsT0FBTztZQUNILE9BQU87U0FDVixDQUFDO0lBQ04sQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUyxJQUFJLENBQUMsR0FBOEI7UUFDeEMsT0FBTyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUM7YUFDYixPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQzthQUN0QixPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQzthQUN2QixPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQzthQUN0QixPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQzthQUNyQixPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7QUFFTCxDQUFDLENBQUMsQ0FBQyxNQUFxQixDQUFDLENBQUM7QUFFMUI7Ozs7Ozs7Ozs7Ozs7O0VBY0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXJMb2csIExvZyB9IGZyb20gXCIuL2xvZy5qc1wiO1xyXG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gXCJoYXItZm9ybWF0XCI7XHJcblxyXG50eXBlIEljb24gPSBcInNwaW5uZXJcIiB8IFwiZXJyb3JcIiB8IFwiY2hlY2tcIiB8IHVuZGVmaW5lZDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGN1c3RvbSBlbGVtZW50IGFsbG93cyB1cyB0byBpc29sYXRlIHNlcnZlci1zaWRlIGxvZyBwYWdlcyBpbiBhIHNoYWRvdy1yb290LlxyXG4gKi9cclxuY2xhc3MgTG9nRW50cnkgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XHJcbiAgICBwcml2YXRlIHNoYWRvdzogU2hhZG93Um9vdDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogXCJvcGVuXCIgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0SFRNTChodG1sOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgZG9jID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhodG1sLCBcInRleHQvaHRtbFwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG5cclxuICAgICAgICBbLi4uZG9jLmhlYWQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlXCIpXS5mb3JFYWNoKFxyXG4gICAgICAgICAgICBzdHlsZSA9PiB0aGlzLnNoYWRvdy5hcHBlbmRDaGlsZChzdHlsZSkpO1xyXG5cclxuICAgICAgICBbLi4uZG9jLmJvZHkuY2hpbGROb2Rlc10uZm9yRWFjaChcclxuICAgICAgICAgICAgbm9kZSA9PiB0aGlzLnNoYWRvdy5hcHBlbmRDaGlsZChub2RlKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImxvZy1lbnRyeVwiLCBMb2dFbnRyeSk7XHJcblxyXG4oKHBhbmVsOiBQYW5lbFdpbmRvdykgPT4ge1xyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiU1RBUlQ6IHBhbmVsLmpzXCIpO1xyXG5cclxuICAgIGNvbnN0ICRjb250ZW50ID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PihcIltkYXRhLWNvbnRlbnRdXCIpITtcclxuXHJcbiAgICBwYW5lbC5vbk5hdmlnYXRpb24gPSB1cmwgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiT04gTkFWSUdBVElPTlwiLCB1cmwpO1xyXG5cclxuICAgICAgICAvLyBUT0RPIGFkZCBcIlByZXNlcnZlIExvZ1wiIG9wdGlvbiAoc2ltaWxhciB0byB0aGUgXCJOZXR3b3JrXCIgdGFiKVxyXG4gICAgICAgICRjb250ZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICB9O1xyXG5cclxuICAgIHBhbmVsLm9uUmVxdWVzdCA9IHRyYW5zYWN0aW9uID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIk9OIFJFUVVFU1RcIiwgdHJhbnNhY3Rpb24pO1xyXG5cclxuICAgICAgICAvLyBOT1RFOiB3ZWlyZCB0eXBlY2FzdHMgcmVxdWlyZWQgaGVyZSBiZWNhdXNlIHRoZSByZXF1ZXN0L3Jlc3BvbnNlIHByb3BlcnRpZXNcclxuICAgICAgICAvLyAgICAgICBhcmVuJ3QgZGVmaW5lZCBpbiBgQHR5cGVzL2Nocm9tZWAgLSB3ZSBoYXZlIHRvIHB1bGwgdGhlc2UgZGVmaW5pdGlvbnNcclxuICAgICAgICAvLyAgICAgICBmcm9tIGEgc2VwYXJhdGUgcGFja2FnZSBgQHR5cGVzL2hhci1mb3JtYXRgIGFuZCBtYW51YWxseSBjYXN0OlxyXG5cclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gKHRyYW5zYWN0aW9uIGFzIGFueSkucmVxdWVzdCBhcyBSZXF1ZXN0O1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gKHRyYW5zYWN0aW9uIGFzIGFueSkucmVzcG9uc2UgYXMgUmVzcG9uc2U7XHJcblxyXG4gICAgICAgIGNvbnN0IHRpdGxlID0gYFske3Jlc3BvbnNlLnN0YXR1c30gJHtyZXNwb25zZS5zdGF0dXNUZXh0fV0gJHtyZXF1ZXN0Lm1ldGhvZH0gJHtyZXF1ZXN0LnVybH1gO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBoZWFkZXIgb2YgcmVzcG9uc2UuaGVhZGVycykge1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gaGVhZGVyLm5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSBcIngtY2hyb21lbG9nZ2VyLWRhdGFcIikge1xyXG4gICAgICAgICAgICAgICAgYXBwZW5kTG9nKHRpdGxlLCBcIlgtQ2hyb21lTG9nZ2VyLURhdGFcIiwgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvZyA9IEpTT04ucGFyc2UoYXRvYihoZWFkZXIudmFsdWUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUEFSU0VEIENIUk9NRS1MT0dHRVIgSEVBREVSXCIsIGxvZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlbmRlckxvZyhsb2cgYXMgTG9nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGBFcnJvciBwYXJzaW5nIFgtQ2hyb21lTG9nZ2VyLURhdGEgaGVhZGVyICgke2Vycm9yfSlgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSBcIngtc2VydmVybG9nLWxvY2F0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoaGVhZGVyLnZhbHVlLCByZXF1ZXN0LnVybCkuaHJlZjtcclxuXHJcbiAgICAgICAgICAgICAgICBhcHBlbmRMb2codGl0bGUsIHVybCwgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZldGNoKHVybCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFjY2VwdFwiOiBcInRleHQvaHRtbCwgYXBwbGljYXRpb24vanNvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihsb2dfcmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IGxvZ19yZXNwb25zZS5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodHlwZSAmJiB0eXBlLm1hdGNoKC9edGV4dFxcL2h0bWwvKSB8fCAoIXR5cGUgJiYgdXJsLm1hdGNoKC9cXC5odG1sJC8pKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRkVUQ0ggSFRNTFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobG9nX3Jlc3BvbnNlLnRleHQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZFVENIIEpTT05cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGxvZ19yZXNwb25zZS5qc29uKCkudGhlbihqc29uID0+IHJlbmRlckxvZyhqc29uKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoYFVuYWJsZSB0byBsb2FkIHNlcnZlci1sb2cgZnJvbTogJHt1cmx9ICgke2Vycm9yfSlgKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGVuZCBhIGxvZyBkb2N1bWVudCB0byB0aGUgXCJTZXJ2ZXIgTG9nXCIgcGFuZWxcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYXBwZW5kTG9nKHRpdGxlOiBzdHJpbmcsIHNvdXJjZTogc3RyaW5nLCBkb2N1bWVudFByb21pc2U6IFByb21pc2U8c3RyaW5nPikge1xyXG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGFwcGVuZEhlYWRlcihcInNwaW5uZXJcIiwgdGl0bGUsIHNvdXJjZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxvZy1lbnRyeVwiKSBhcyBMb2dFbnRyeTtcclxuXHJcbiAgICAgICAgJGNvbnRlbnQuYXBwZW5kQ2hpbGQoZWwpO1xyXG5cclxuICAgICAgICBkb2N1bWVudFByb21pc2VcclxuICAgICAgICAgICAgLnRoZW4oaHRtbCA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbC5zZXRIVE1MKGh0bWwpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlYWRlci5zZXRJY29uKFwiY2hlY2tcIik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbC5zZXRIVE1MKGA8cHJlIHN0eWxlPVwiY29sb3I6cmVkOyBwYWRkaW5nLWxlZnQ6MjBweDtcIj4ke2h0bWwoZXJyb3IpfTwvcHJlPmApO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlYWRlci5zZXRJY29uKFwiZXJyb3JcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgaGVhZGVyIHdpdGggYW4gaWNvbiwgdGl0bGUgYW5kIHNvdXJjZSBvZiB0aGUgcmVxdWVzdFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBhcHBlbmRIZWFkZXIoaWNvbjogSWNvbiwgdGl0bGU6IHN0cmluZywgc291cmNlOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG4gICAgICAgIGVsLmlubmVySFRNTCA9IChgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXIgJHtpY29uID8gYGhlYWRlci0tJHtpY29ufWAgOiBgYH1cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJfX2ljb25cIj4ke1xyXG4gICAgICAgICAgICAgICAgICAgIGljb24gPyBgPHNwYW4gY2xhc3M9XCJpY29uXCI+PC9zcGFuPmAgOiBgYFxyXG4gICAgICAgICAgICAgICAgfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlcl9fdGl0bGVcIj4ke2h0bWwodGl0bGUpfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlcl9fc291cmNlXCI+JHtodG1sKHNvdXJjZSl9PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PmBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAkY29udGVudC5hcHBlbmRDaGlsZChlbCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldEljb24oaWNvbjogSWNvbikge1xyXG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKFwiLmljb25cIikhLmNsYXNzTmFtZSA9IGBpY29uIGljb24tJHtpY29ufWA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2V0SWNvbihpY29uKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2V0SWNvblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAgICAgXHJcbiAgICAvKipcclxuICAgICAqIEVzY2FwZSBwbGFpbiB0ZXh0IGFzIEhUTUxcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaHRtbChzdHI6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiAoc3RyIHx8ICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csICcmIzM5OycpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcclxuICAgICAgICAgICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcclxuICAgIH1cclxuICAgIFxyXG59KSh3aW5kb3cgYXMgUGFuZWxXaW5kb3cpO1xyXG5cclxuLypcclxuXHJcbi8vIE5PVEU6IGRvbid0IG5lZWQgdGhpcyBmb3Igbm93IC0gbWlnaHQgbmVlZCBpdCB0byBjb21tdW5pY2F0ZSB3aXRoIFwiYmFja2dyb3VuZC5qc1wiXHJcblxyXG5wYW5lbF93aW5kb3cuZG9fc29tZXRoaW5nID0gKG1zZzogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkRPSU5HIFNPTUVUSElOR1wiKTtcclxuICAgIGRvY3VtZW50LmJvZHkudGV4dENvbnRlbnQgKz0gJ1xcbicgKyBtc2c7IC8vIFN0dXBpZCBleGFtcGxlLCBQb0NcclxufVxyXG5cclxuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIE5vIG5lZWQgdG8gY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYHJlc3BvbmRgLCBiZWNhdXNlXHJcbiAgICAvLyB0aGUgcGFuZWwgY2FuIG9ubHkgYmUgY2xpY2tlZCB3aGVuIGl0J3MgdmlzaWJsZS4uLlxyXG4gICAgcGFuZWxfd2luZG93LnJlc3BvbmQoJ0Fub3RoZXIgc3R1cGlkIGV4YW1wbGUhJyk7XHJcbn07XHJcbiovXHJcbiJdfQ==