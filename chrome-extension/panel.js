import { renderLog } from "./log.js";
/**
 * This custom element allows us to isolate server-side log pages in a shadow-root.
 */
class LogEntry extends HTMLElement {
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: "open" });
    }
    setHTML(html) {
        let doc = new DOMParser().parseFromString(html, "text/html");
        this.style.display = "block";
        [...doc.head.querySelectorAll("style")].forEach(style => this.shadow.appendChild(style));
        [...doc.body.childNodes].forEach(node => this.shadow.appendChild(node));
    }
}
customElements.define("log-entry", LogEntry);
((panel) => {
    console.log("START: panel.js");
    const $content = document.body.querySelector("[data-content]");
    panel.onNavigation = url => {
        console.log("ON NAVIGATION", url);
        // TODO add "Preserve Log" option (similar to the "Network" tab)
        $content.innerHTML = "";
    };
    panel.onRequest = transaction => {
        console.log("ON REQUEST", transaction);
        // NOTE: weird typecasts required here because the request/response properties
        //       aren't defined in `@types/chrome` - we have to pull these definitions
        //       from a separate package `@types/har-format` and manually cast:
        const request = transaction.request;
        const response = transaction.response;
        const title = `${request.method} ${request.url} [${response.status} ${response.statusText}]`;
        for (let header of response.headers) {
            const name = header.name.toLowerCase();
            if (name === "x-chromelogger-data") {
                appendLog(title, "X-ChromeLogger-Data", new Promise((resolve, reject) => {
                    try {
                        const log = JSON.parse(atob(header.value));
                        console.log("PARSED CHROME-LOGGER HEADER", log);
                        resolve(renderLog(log));
                    }
                    catch (error) {
                        reject(`Error parsing X-ChromeLogger-Data header (${error})`);
                    }
                }));
            }
        }
    };
    /**
     * Append a log document to the "Server Log" panel
     */
    function appendLog(title, source, documentPromise) {
        const header = appendHeader("spinner", title, source);
        const el = document.createElement("log-entry");
        $content.appendChild(el);
        documentPromise
            .then(html => {
            el.setHTML(html);
            header.setIcon("check");
        })
            .catch(error => {
            el.setHTML(`<pre style="color:red; padding-left:20px;">${html(error)}</pre>`);
            header.setIcon("error");
        });
    }
    /**
     * Create a header with an icon, title and source of the request
     */
    function appendHeader(icon, title, source) {
        const el = document.createElement("div");
        el.innerHTML = (`
            <div class="header ${icon ? `header--${icon}` : ``}">
                <div class="header__icon">${icon ? `<span class="icon"></span>` : ``}</div>
                <div class="header__title">${html(title)}</div>
                <div class="header__source">${html(source)}</div>
            </div>`);
        $content.appendChild(el);
        function setIcon(icon) {
            el.querySelector(".icon").className = `icon icon-${icon}`;
        }
        ;
        setIcon(icon);
        return {
            setIcon
        };
    }
    /**
     * Escape plain text as HTML
     */
    function html(str) {
        return (str || '')
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }
})(window);
/*

// NOTE: don't need this for now - might need it to communicate with "background.js"

panel_window.do_something = (msg: string) => {
    console.log("DOING SOMETHING");
    document.body.textContent += '\n' + msg; // Stupid example, PoC
}

document.documentElement.onclick = function() {
    // No need to check for the existence of `respond`, because
    // the panel can only be clicked when it's visible...
    panel_window.respond('Another stupid example!');
};
*/
//# sourceMappingURL=data:application/json;base64,